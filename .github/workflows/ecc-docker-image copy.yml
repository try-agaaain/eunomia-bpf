name: Build and publish ecc docker image

on:
  push:
    branches: "*"
  pull_request:
    branches: "*"

env:
  BUILD_TYPE: Release
  INSTALL_LOCATION: .local

jobs:

  build-ecc:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"

    steps:
    - uses: actions/checkout@v2

    - name: get submodule
      run:  git submodule update --init --recursive

    - name: install deps
      run: |
          sudo make -C compiler install-deps
          cargo install clippy-sarif sarif-fmt grcov
          rustup component add llvm-tools-preview

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af #@v1
      with:
        profile: minimal
        toolchain: stable
        components: clippy
        override: true

    - name: cache dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: ${{ github.workspace }}/${{ env.INSTALL_LOCATION }}
        key: ${{ runner.os }}-dependencies

    - name: build ecc
      run:  cd compiler && make && make install

    - name: test ecc
      run:  cd compiler && make test
    - name: Upload analysis results to GitHub
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: compiler/cmd/rust-clippy-results.sarif
        wait-for-processing: true

    - name: Upload output file
      uses: actions/upload-artifact@v3
      with:
        name: my-ecc
        path: ./compiler/workspace/bin/ecc

    - name: Code coverage using Codecov
      run: bash <(curl -s https://codecov.io/bash)


  # define job to build and publish docker image
  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest
    needs: [ "build-ecc" ]
    # steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # setup Docker buld action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: my-ecc
      
      - name: output current dir info
        run: pwd && ls && echo "\n" && ls /home/runner/work/eunomia-bpf/eunomia-bpf && ls my-ecc

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ./compiler
          # Note: tags has to be all lower-case
          platforms: linux/amd64,linux/386
          tags: |
            try-agaaain/eunomia-bpf.ecc:latest 
            ghcr.io/try-agaaain/eunomia-bpf/ecc:latest
            
          # build on feature branches, push only on main branch
          push: true
          # push: ${{ github.ref == 'refs/heads/main' }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}